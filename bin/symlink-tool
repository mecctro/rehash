#!/usr/bin/perl -w
# This code is a part of Slash, and is released under the GPL.
# Copyright 1997-2005 by Open Source Technology Group. See README
# and COPYING for more information, or see http://slashcode.com/.
# $Id$

# By Jamie McCarthy, jamie@slashdot.org
# Based on template-tool, by Cliff Wood, Patrick Galbraith, Brian Aker

use strict;
use File::Basename;
use File::Path;
use File::Spec::Functions qw( :DEFAULT splitpath splitdir catfile file_name_is_absolute );
use Cwd 'realpath';
use Slash;
use Slash::Utility;
use Slash::DB;
use Slash::Install;
use Template;
use Getopt::Std;
use JavaScript::Minifier 0.02;

(my $VERSION) = ' $Revision$ ' =~ /\$Revision:\s+([^\s]+)/;
my $PROGNAME = basename($0);
my %opts;

my $symlink_exists = eval { symlink("",""); 1 };
if (!$symlink_exists) {
	print STDERR "Sorry - symlink() not implemented on your system,\n";
	print STDERR "so (duh!) symlink-tool cannot run.\n";
	exit 1;
}

# Remember to doublecheck these match usage()!
usage('Options used incorrectly')
	unless getopts('hvu:TtUV', \%opts);
usage() if $opts{h} || !keys %opts;
version() if $opts{v};
usage('Right now only -U does anything') if !$opts{U};
my $testing = $opts{T} ? 1 : ($opts{t} ? 1 : 0);
my $verbose = $opts{V} ? 1 : 0;

my $virtuser = $opts{u} || 'slash';
createEnvironment($virtuser);
my @dotfiles = ( );
my $slashdb = getCurrentDB();
my $constants        = getCurrentStatic(undef, 0);
my $constants_secure = getCurrentStatic(undef, 1);
my $install = Slash::Install->new($virtuser);

# This will read all the themes and all the plugins available for this
# installation.
my $get_theme = $install->get("theme");
die "cannot get theme, DB probably unreachable" if !$get_theme;
my $site_theme = $get_theme->{value};
my $site_plugins = $install->get("plugin");
my @site_plugins = sort
	map { $site_plugins->{$_}{value} }
	keys %$site_plugins;

# What one theme, and what subset of the available plugins, is this
# site using?
my $theme_hr = $install->_getList(
	$constants->{slashdir}, "themes", "THEME", 1
)->{$site_theme};
my $plugin_list = $install->_getList(
	$constants->{slashdir}, "plugins", "PLUGIN", 1
);
my @template_preprocess = ( );


sub absolute_paths {
	my($include_path, $filelist) = @_;
	my @result = map { realpath(
		file_name_is_absolute($_)
		? $_
		: catfile($include_path, $_)
	) } @$filelist;
	return \@result;
}

sub template_process {
	my($include_path, $filelist, $destpath, $destpath_secure, $is_glob) = @_;
	if (!$destpath_secure)  {
		$destpath_secure = $destpath;
		$destpath_secure =~ s/\.(\w+)$/\.ssl\.$1/;
	}
	my $javascript_debug = $is_glob ? 0 : 1;
	my $abs_filelist_ar = absolute_paths($include_path, $filelist);
	my $glob_template = Template->new({
		ABSOLUTE	=> 1,
		PRE_PROCESS	=> \@template_preprocess,
		PROCESS		=> $abs_filelist_ar,
		OUTPUT		=> \$destpath,
		INTERPOLATE	=> 0,
	}) || die "$Template::ERROR\n";
	$glob_template->process($abs_filelist_ar->[0],
		{ constants => $constants,        javascript_debug => $javascript_debug },
		$destpath)
		|| die $glob_template->error(), "\n";
	$glob_template->process($abs_filelist_ar->[0],
		{ constants => $constants_secure, javascript_debug => $javascript_debug },
		$destpath_secure)
		|| die $glob_template->error(), "\n";
	return $destpath;
}


############################################################
# Build (once) the list of files that templates should PRE_PROCESS
# THEMEs first, so PLUGINs can override
for my $theme_or_plugin ($theme_hr, values %$plugin_list) {
	my $files = $theme_or_plugin->{template_preprocess};
	next unless $files;

	my @files = ( );
	push @files, ref($files) && ref($files) eq 'ARRAY' ? @$files : $files;
	push @template_preprocess, @{absolute_paths($theme_or_plugin->{dir}, \@files)};
}
#use Data::Dumper;
#print "PRE_PROCESS: " . Dumper(\@template_preprocess);

############################################################
# Set up the %theme_subdir_files and %plugin_subdir_files hashes,
# to have a list of all the files that our theme references.
my %theme_subdir_files = ( );
my %plugin_subdir_files = ( );
my %theme_css_use_imagedir = ();
my %plugin_css_use_imagedir = ();
# First, pull in the files referenced by the theme.
my @theme_htdocs_keys = grep /^(htdoc|image|topic|css|js|idle|core)/, keys %$theme_hr;
for my $key (@theme_htdocs_keys) {
	next unless $key && $theme_hr->{$key};
	if ($key =~ /css/ && $constants->{css_use_imagedir}) {
		if (ref($theme_hr->{$key}) && ref($theme_hr->{$key}) eq "ARRAY") {
			$theme_css_use_imagedir{$_} = 1 foreach @{$theme_hr->{$key}};
		} else {
			$theme_css_use_imagedir{$theme_hr->{$key}} = 1;
		}
	}
	push @{$theme_subdir_files{htdocs}},
		ref($theme_hr->{$key}) && ref($theme_hr->{$key}) eq 'ARRAY'
			? @{$theme_hr->{$key}}
			: $theme_hr->{$key};
}

for my $key (qw( tasks misc )) {
	my $src_key = $key;
	$src_key =~ s/s$//; # theme "task" becomes theme_subdir_files "tasks"
	next unless $theme_hr->{$src_key};
	@{$theme_subdir_files{$key}} =
		ref($theme_hr->{$src_key}) && ref($theme_hr->{$src_key}) eq 'ARRAY'
			? @{$theme_hr->{$src_key}}
			: $theme_hr->{$src_key};
}

# Then, pull in the files referenced by each plugin used.
my %plugin_htdocs_keys = ( );
my @plugin_htdocs_keys = ( );
for my $plugin (keys %$plugin_list) {
	for my $key (grep /^(htdoc|image|topic|css|js|idle|core)/, keys %{$plugin_list->{$plugin}}) {
		$plugin_htdocs_keys{$key} = 1;
	}
}
@plugin_htdocs_keys = sort keys %plugin_htdocs_keys;
for my $plugin (keys %$plugin_list) {
	my $plugin_hr = $plugin_list->{$plugin};
	for my $key (@plugin_htdocs_keys) {
		next unless $key && $plugin_hr->{$key};
		if ($key =~ /css/ && $constants->{css_use_imagedir}) {
			if (ref($plugin_hr->{$key}) && ref($plugin_hr->{$key}) eq "ARRAY") {
				$plugin_css_use_imagedir{$plugin}{$_} = 1 foreach @{$plugin_hr->{$key}};
			} else {
				$plugin_css_use_imagedir{$plugin}{ $plugin_hr->{$key} } = 1;
			}
		}
		push @{$plugin_subdir_files{$plugin}{htdocs}},
			ref($plugin_hr->{$key}) && ref($plugin_hr->{$key}) eq 'ARRAY'
				? @{$plugin_hr->{$key}}
				: $plugin_hr->{$key};
	}
	for my $key (qw( tasks misc )) {
		my $src_key = $key;
		$src_key =~ s/s$//; # plugin "task" becomes "tasks"
		next unless $plugin_hr->{$src_key};
		@{$plugin_subdir_files{$plugin}{$key}} =
			ref($plugin_hr->{$src_key}) && ref($plugin_hr->{$src_key}) eq 'ARRAY'
				? @{$plugin_hr->{$src_key}}
				: $plugin_hr->{$src_key};
	}
}
#use Data::Dumper;
#print "theme_hr: " . Dumper($theme_hr);
#print "plugin_list: " . Dumper($plugin_list);
#print "theme_subdir_files: " . Dumper(\%theme_subdir_files);
#print "plugin_subdir_files: " . Dumper(\%plugin_subdir_files);
#print "theme css imagedir: " . Dumper(\%theme_css_use_imagedir);
#print "plugin css imagedir: " . Dumper(\%plugin_css_use_imagedir);

my $theme_dir = $theme_hr->{dir};
my $datadir = $constants->{datadir};

if (!$testing && !-w $datadir) {
	print STDERR "No write access to '$datadir'\n";
	print STDERR "for EUID $>, cannot write any files\n";
	exit 1;
}

my %valid_file = ( );
my %processed = ( );
for my $subdir (sort keys %theme_subdir_files) {
	my @files = sort @{$theme_subdir_files{$subdir}};
	for my $target_file (@files) {
		# Strip off "../slashcode/" from front to find
		# where the symlink was installed in the
		# "site/foo" tree.
		my $theme_file_abs = canonpath(catfile($theme_dir, $target_file));
		1 while $theme_file_abs =~ s{/[^/]+/\.\.}{};
		my $site_rel_file = $target_file;
		1 while $site_rel_file =~ s{^\.\.\/[^/]+/}{};
		my($site_file_abs, $site_file_abs_wrong) =
			get_right_and_wrong_file_abs($site_rel_file,
				$theme_css_use_imagedir{$target_file});

		if ($processed{$site_file_abs}) {
			if ($verbose) {
				print "Skipping file in theme, already processed: '$site_file_abs'\n";
			}
			next;
		}
		my $site_file_abs_dot = dotfile($site_file_abs);
		my $site_file_dot_short = dotfile($site_rel_file);
		# At this point, $site_file_abs is e.g.
		# '/usr/local/slash/site/mysite/tasks/spamarmor.pl'
		# $site_file_abs_dot is e.g.
		# '/usr/local/slash/site/mysite/tasks/.spamarmor.pl'
		# $theme_file_abs is e.g.
		# '/usr/local/slash/theme/slashcode/tasks/spamarmor.pl'

		# Process an .Xraw file (e.g. cssraw) and write its .X file.
		my($filetype) = $theme_file_abs =~ /\.(\w+)$/;
		$filetype ||= '';
		if (my($cookedtype) = $filetype =~ /^(\w+)raw$/) {
			my $destfile = $theme_file_abs;
			$destfile =~ s/\.\Q$filetype\E$/.$virtuser.$cookedtype/;
			my $destfile_secure = $theme_file_abs;
			$destfile_secure =~ s/\.\Q$filetype\E$/.$virtuser.ssl.$cookedtype/;
			# If a minified that's handled in a glob, skip it here
			my $in_glob = 0;
			for my $g (keys %{ $theme_hr->{'glob'} }) {
				my $f = $theme_hr->{'glob'}{$g};
				$f =~ s/\.(\w+)$/.${1}raw/;
				my $f_minified = $f;
				$f_minified =~ s/\.(\w+raw)$/-minified.$1/;
				$in_glob = 1 if $target_file eq $f || $target_file eq $f_minified;
			}
			template_process($theme_dir, [ $target_file ], $destfile, $destfile_secure, 0) unless $in_glob;
		}
		$processed{$site_file_abs} = $valid_file{$site_file_abs} = 1;
	}
}
for my $plugin (sort keys %plugin_subdir_files) {
	my $plugin_hr = $plugin_subdir_files{$plugin};
	my $plugin_dir = $plugin_list->{$plugin}{dir};
	for my $subdir (sort keys %$plugin_hr) {
		my @files = sort @{$plugin_hr->{$subdir}};
#print "plugin '$plugin' subdir '$subdir' files '@files'\n";
		for my $target_file (@files) {
			my $plugin_file_abs = canonpath(catfile($plugin_dir, $target_file));
			1 while $plugin_file_abs =~ s{/[^/]+/\.\.}{};
			my $site_rel_file = $target_file;
			1 while $site_rel_file =~ s{^\.\.\/[^/]+/}{};
			# Plugins don't get the type prepended so we need to
			# do that here.
			$site_rel_file =~ s{^(?:$subdir/)?}{$subdir/};
			my($site_file_abs, $site_file_abs_wrong) =
				get_right_and_wrong_file_abs($site_rel_file,
					$plugin_css_use_imagedir{$plugin}{$target_file});

#print "plugin '$plugin' subdir '$subdir' site_rel_file '$site_rel_file' site_file_abs '$site_file_abs'\n";
			if ($processed{$site_file_abs}) {
				if ($verbose) {
					print "Skipping file in '$plugin' plugin, already processed: '$site_file_abs'\n";
				}
				next;
			}
			my $site_file_abs_dot = dotfile($site_file_abs);
			my $site_file_dot_short = dotfile($site_rel_file);
			# At this point, $site_file_abs is e.g.
			# '/usr/local/slash/site/mysite/tasks/adminmail.pl'
			# $site_file_abs_dot is e.g.
			# '/usr/local/slash/site/mysite/tasks/.adminmail.pl
			# $plugin_file_abs is e.g.
			# '/usr/local/slash/plugin/Stats/adminmail.pl'

			# Process an .Xraw file (e.g. cssraw) and write its .X file.
			my($filetype) = $plugin_file_abs =~ /\.(\w+)$/;
			$filetype ||= '';
			if (my($cookedtype) = $filetype =~ /^(\w+)raw$/) {
				my $destfile = $plugin_file_abs;
				$destfile =~ s/\.\Q$filetype\E$/.$virtuser.$cookedtype/;
				my $destfile_secure = $plugin_file_abs;
				$destfile_secure =~ s/\.\Q$filetype\E$/.$virtuser.ssl.$cookedtype/;
				# If a minified that's handled in a glob, skip it here
				my $in_glob = 0;
				for my $g (keys %{ $theme_hr->{'glob'} }) {
					my $f = $theme_hr->{'glob'}{$g};
					$f =~ s/\.(\w+)$/.${1}raw/;
					my $f_minified = $f;
					$f_minified =~ s/\.(\w+raw)$/-minified.$1/;
					$in_glob = 1 if $target_file eq $f || $target_file eq $f_minified;
				}
				template_process($plugin_dir, [ $target_file ], $destfile, $destfile_secure, 0) unless $in_glob;
			}
			$processed{$site_file_abs} = $valid_file{$site_file_abs} = 1;
		}
	}
}

############################################################
# Handle globbing and minifying/tidying.  This has to happen after
# the above cssraw->css conversion, but before the css symlinking
# below so globs can be symlinked.
for my $theme_or_plugin ($theme_hr, values %$plugin_list) {
	for my $glob (keys %{$theme_or_plugin->{'glob'}}) { # 'alljs'
		my $destpath = canonpath(
			catfile($theme_or_plugin->{dir}, # /usr/local/slash/themes/slashdot
				$theme_or_plugin->{'glob'}{$glob}) # htdocs/core.css
		);
		my @filelist = ( );
		for my $file (@{$theme_or_plugin->{$glob}}) {
			push @filelist, canonpath(catfile($theme_or_plugin->{dir}, $file));
		}
		# @filelist = e.g. ('htdocs/base.css','htdocs/ostgnavbar.css'...)

		my($name, $path, $suffix) = fileparse($destpath, qr/\.[^.]*/);
		$destpath = "$path$name.$virtuser$suffix";
		my $destpath_secure = "$path$name.$virtuser.ssl$suffix";
		# XXX actually I think we want the raw files here, to avoid double-processing, right?
		# Update 2009-04: Right.
		template_process($theme_or_plugin->{dir}, \@filelist, $destpath, $destpath_secure, 1);

		# Hack until Java is available on the sandboxes, too; and I figure out how to do it right.
		my $compress = '';
		my $java = '';
		if ( -f '/usr/java/jdk1.5.0_15/jre/bin/java' ) {
			$java = '/usr/java/jdk1.5.0_15/jre/bin/java';
		} elsif ( -f '/opt/dell/srvadmin/jre/bin/java' ) {
			$java = '/opt/dell/srvadmin/jre/bin/java';
		}
		my $compressor_jar = '/usr/local/src/slash/plugins/Ajax/yuicompressor.jar';
		if ( $java && -f $compressor_jar ) {
			$compress = "$java -jar $compressor_jar";
		}

		# you can glob any kinds of files you like, even mixing them...
		# ...but if the globbed destination claims to be JavaScript, I'll also make a `minified' version
		# (JavaScript::Minifier is a requirement in the Slash bundle)
		if ($suffix eq '.js') {
			my($min_src, $min_dest);
			my %to_link = (
				$destpath,        "${path}${name}-minified.$virtuser.js",
				$destpath_secure, "${path}${name}-minified.$virtuser.ssl.js",
			);
			for my $dp (sort keys %to_link) {
				open $min_src, '<', $dp;
				my $minified_name = $to_link{$dp};
				open $min_dest, '>', $minified_name;
				if ( $compress && system("$compress $dp -o $minified_name")==0 ) {
					print "symlink-tool: $compress $dp -o $minified_name\n" if $verbose;
				} elsif (JavaScript::Minifier->can('jsmin')) {
					JavaScript::Minifier::jsmin($min_src, $min_dest);
					print "symlink-tool: JavaScript::Minifier::jsmin($dp, $minified_name)\n" if $verbose;
				} elsif (JavaScript::Minifier->can('minify')) {
					&JavaScript::Minifier::minify(
						input => $min_src, outfile => $min_dest
					);
					print "symlink-tool: JavaScript::Minifier::minify(input=>$dp, outfile=>$minified_name)\n" if $verbose;
				} else {
					die "I give up, how does JavaScript::Minifier $JavaScript::Minifier::VERSION do its thing?";
				}
				close $min_src;
				close $min_dest;
			}
		}

		# ...similarly for CSS, I'll also make a `csstidied' version
		# (CSSTidy is _not_ a requirement in the Slash bundle, so we have to check)
		elsif ($suffix eq '.css') {
			my %to_link = (
				$destpath,        "${path}${name}-tidied.$virtuser.css",
				$destpath_secure, "${path}${name}-tidied.$virtuser.ssl.css",
			);
			for my $dp (sort keys %to_link) {
				my $tidiedpath = $to_link{$dp};
				# create a `tidied' version of css globs if csstidy is available,
				#   else the tidied version is just a link to the original concatenation
				# consider: allow custom install dir for csstidy?
				# like sbindir, datadir, hc_fontpath, et al.?
				if ( $compress && system("$compress $dp -o $tidiedpath")==0 ) {
					print "symlink-tool: $compress $dp -o $tidiedpath\n" if $verbose;
				} elsif ( system("csstidy $dp --silent=true --template=high $tidiedpath")==0 ) {
					print "symlink-tool: csstidy $dp --silent=true --template=high $tidiedpath\n" if $verbose;
				} else {
					symlink($dp, $tidiedpath);
				}
			}
		}
	}
}

%processed = ( );
my $num_changes = 0;
for my $subdir (sort keys %theme_subdir_files) {
	my @files = sort @{$theme_subdir_files{$subdir}};
	for my $target_file (@files) {
		# Strip off "../slashcode/" from front to find
		# where the symlink was installed in the
		# "site/foo" tree.
		my $theme_file_abs = canonpath(catfile($theme_dir, $target_file));
		1 while $theme_file_abs =~ s{/[^/]+/\.\.}{};
		my $has_virtuser = 0;
		$has_virtuser = 1 if
			$theme_file_abs =~ s/\.(\w+)raw$/.$virtuser.$1/
				or $theme_file_abs =~ s/-tidied\.css/-tidied.$virtuser.css/
				or $theme_file_abs =~ s/-minified\.js/-minified.$virtuser.js/;
		my $site_rel_file = $target_file;
		1 while $site_rel_file =~ s{^\.\.\/[^/]+/}{};
		$site_rel_file =~ s/\.(\w+)raw$/.$1/;
		my($site_file_abs, $site_file_abs_wrong) =
			get_right_and_wrong_file_abs($site_rel_file,
				$theme_css_use_imagedir{$target_file});

		if ($processed{$site_file_abs}) {
			if ($verbose) {
				print "Skipping file in theme, already processed: '$site_file_abs'\n";
			}
			next;
		}

		my $site_file_abs_dot = dotfile($site_file_abs);
		my $site_file_dot_short = dotfile($site_rel_file);
		# At this point, $site_file_abs is e.g.
		# '/usr/local/slash/site/mysite/tasks/spamarmor.pl'
		# $site_file_abs_dot is e.g.
		# '/usr/local/slash/site/mysite/tasks/.spamarmor.pl'
		# $theme_file_abs is e.g.
		# '/usr/local/slash/theme/slashcode/tasks/spamarmor.pl'
		$num_changes += handle_file($site_file_abs, $theme_file_abs,
			$site_file_abs_dot, $site_file_dot_short,
			$site_file_abs_wrong);
		$processed{$site_file_abs} = $valid_file{$site_file_abs} = 1;

		my $site_rel_file_secure = $site_rel_file;
		if ($has_virtuser && $site_rel_file_secure =~ s/\.(css|js)$/.ssl.$1/) {
			my($site_file_abs_secure, $site_file_abs_secure_wrong) =
				get_right_and_wrong_file_abs($site_rel_file_secure,
					$theme_css_use_imagedir{$target_file});
			my $theme_file_abs_secure = $theme_file_abs;
			$theme_file_abs_secure =~ s/\.(css|js)$/.ssl.$1/;
			$num_changes += handle_file($site_file_abs_secure, $theme_file_abs_secure,
				$site_file_abs_dot, $site_file_dot_short,
				$site_file_abs_secure_wrong);
		}
	}
}
for my $plugin (sort keys %plugin_subdir_files) {
	my $plugin_hr = $plugin_subdir_files{$plugin};
	my $plugin_dir = $plugin_list->{$plugin}{dir};
	for my $subdir (sort keys %$plugin_hr) {
		my @files = sort @{$plugin_hr->{$subdir}};
#print "plugin '$plugin' subdir '$subdir' files '@files'\n";
		for my $target_file (@files) {
			my $plugin_file_abs = canonpath(catfile($plugin_dir, $target_file));
			1 while $plugin_file_abs =~ s{/[^/]+/\.\.}{};
			my $has_virtuser = 0;
			$has_virtuser = 1 if
				$plugin_file_abs =~ s/\.(\w+)raw$/.$virtuser.$1/
					or $plugin_file_abs =~ s/-tidied\.css/-tidied.$virtuser.css/
					or $plugin_file_abs =~ s/-minified\.js/-minified.$virtuser.js/;
			my $site_rel_file = $target_file;
			1 while $site_rel_file =~ s{^\.\.\/[^/]+/}{};
			$site_rel_file =~ s/\.(\w+)raw$/.$1/;
			# Plugins don't get the type prepended so we need to
			# do that here.
			$site_rel_file =~ s{^(?:$subdir/)?}{$subdir/};
			my($site_file_abs, $site_file_abs_wrong) =
				get_right_and_wrong_file_abs($site_rel_file,
					$plugin_css_use_imagedir{$plugin}{$target_file});

#print "plugin '$plugin' subdir '$subdir' site_rel_file '$site_rel_file' site_file_abs '$site_file_abs'\n";
			if ($processed{$site_file_abs}) {
				if ($verbose) {
					print "Skipping file in '$plugin' plugin, already processed: '$site_file_abs'\n";
				}
				next;
			}
			my $site_file_abs_dot = dotfile($site_file_abs);
			my $site_file_dot_short = dotfile($site_rel_file);
			# At this point, $site_file_abs is e.g.
			# '/usr/local/slash/site/mysite/tasks/adminmail.pl'
			# $site_file_abs_dot is e.g.
			# '/usr/local/slash/site/mysite/tasks/.adminmail.pl
			# $plugin_file_abs is e.g.
			# '/usr/local/slash/plugin/Stats/adminmail.pl'

			$num_changes += handle_file($site_file_abs, $plugin_file_abs,
				$site_file_abs_dot, $site_file_dot_short,
				$site_file_abs_wrong);
			$processed{$site_file_abs} = $valid_file{$site_file_abs} = 1;

			my $site_rel_file_secure = $site_rel_file;
			if ($has_virtuser && $site_rel_file_secure =~ s/\.(css|js)$/.ssl.$1/) {
				my($site_file_abs_secure, $site_file_abs_secure_wrong) =
					get_right_and_wrong_file_abs($site_rel_file_secure,
						$plugin_css_use_imagedir{$target_file});
				my $plugin_file_abs_secure = $plugin_file_abs;
				$plugin_file_abs_secure =~ s/\.(css|js)$/.ssl.$1/;
				$num_changes += handle_file($site_file_abs_secure, $plugin_file_abs_secure,
					$site_file_abs_dot, $site_file_dot_short,
					$site_file_abs_secure_wrong);
			}
		}
	}
}
if ($num_changes == 0) {
	print "symlink-tool -U: no symlink changes necessary\n";
}

if (@dotfiles) {
	print "symlink-tool: found dotfiles: @dotfiles\n";
}

###############################################
sub handle_file {
	my($symlink_file, $target_file, $symlink_file_dot, $symlink_file_dot_short, $symlink_file_wrong) = @_;

	if (!-e $target_file) {
		print "Target file '$target_file' missing, can't create symlink\n";
		return 1;
	}
	if ($symlink_file_wrong && !$valid_file{$symlink_file_wrong}) {
		lstat($symlink_file_wrong);
		if (-e _ && -l _) {
			# $symlink_file_wrong is the wrong place to put a symlink.
			# (Well, it's one wrong place -- technically there are an
			# infinite number of wrong places -- but this wrong place
			# is the one that would be correct if the css_use_imagedir
			# var were flipped.)  If a symlink is there already,
			# remove it to avoid confusion.
			print "Incorrect symlink present at '$symlink_file_wrong'; ";
			if ($testing) {
				print "would be unlinked.\n";
			} else {
				print "unlinking.\n";
				unlink $symlink_file_wrong;
			}
		}
	}

	if (!-e $symlink_file && -e $symlink_file_dot) {
		# The symlink file is missing and in its place is a
		# dotfile.  The site admin must have disabled that file,
		# perhaps temporarily.  Make sure it's correct;  do
		# what we were doing to do on the real file, on the
		# dotfile instead.
		$symlink_file = $symlink_file_dot;
		push @dotfiles, $symlink_file_dot_short;
		if ($verbose) {
			print "Checking dotfile replacement at '$symlink_file'\n";
		}
	}

	if (-e $symlink_file && !-l $symlink_file) {
		# The file in place is not a symlink; compare it to
		# what it should be and only replace it with a symlink
		# if the two are identical.
		my $diff;
		if ($verbose) {
			$diff = system("diff $target_file $symlink_file");
		} else {
			$diff = system("diff $target_file $symlink_file > /dev/null");
		}
		if ($diff) {
			print "File should be symlink, but is not, and differs from intended target: '$symlink_file' '$target_file'; difference needs to be resolved or symlink-tool will not touch it\n";
			return 1;
		} else {
			print "File at '$symlink_file' is not a symlink, but is identical to what it should be; ";
			if ($testing) {
				print "file would be unlinked and allowed to be recreated.\n";
				return 1;
			} else {
				print "unlinking; will be created next.\n";
				unlink $symlink_file;
			}
		}
	}

	lstat($symlink_file);
	if (!-e _) {
		print "Symlink at '$symlink_file' missing, ";
		if ($testing) {
			print "would create: '$target_file'\n";
			return 1;
		}
		my $symlink_file_dir = (splitpath($symlink_file))[1];
		mkpath $symlink_file_dir;
		my $success = symlink($target_file, $symlink_file);
		if (!$success) {
			print "attempt to create FAILED: $!\n";
			return 1;
		}
		print "successfully added link to '$target_file'\n";
		return 1;
	}
	my $cur_target_file = readlink($symlink_file);
	if ($cur_target_file eq $target_file) {
		if ($verbose) {
			print "Correct: $symlink_file -> $target_file\n";
		}
		return 0;
	}
	print "Symlink at '$symlink_file' mispointed at '$cur_target_file', ";
	if ($testing) {
		print "would repoint to '$target_file'\n";
		return 1;
	}
	my $success = unlink $symlink_file;
	if (!$success) {
		print "attempt to unlink FAILED: $!\n";
		return 1;
	}
	$success = symlink($target_file, $symlink_file);
	if (!$success) {
		print "original unlinked, attempt to link properly FAILED: $!\n";
		return 1;
	}
	print "successfully relinked to '$target_file'\n";
	return 1;
}

###############################################
sub get_right_and_wrong_file_abs {
	my($site_rel_file, $use_imagedir) = @_;
	my $htdocs_version = canonpath(catfile($datadir, $site_rel_file));
	my $srf_images = $site_rel_file;
	if ($srf_images =~ s{^htdocs(?!/images)}{htdocs/images}) {
		# The images version is different;  there is indeed a right
		# and a wrong answer here so return them both.
		my $images_version = canonpath(catfile($datadir, $srf_images));
		if ($use_imagedir) {
			return ($images_version, $htdocs_version);
		} else {
			return ($htdocs_version, $images_version);
		}
	} else {
		# There is no "images version" (this site_rel_file is
		# already in the htdocs/images directory).  Just return
		# the correct version.
		return ($htdocs_version, '');
	}
}

###############################################
sub dotfile {
	my($file_abs) = @_;
	my($volume, $dirs, $file) = splitpath($file_abs);
	return "$dirs.$file";
}

###############################################
sub usage {
	print "*** $_[0] \n" if $_[0];
	print <<EOT;

Usage: $PROGNAME [OPTIONS] <template templateN>

Main options:
	-h	Help (this message)
	-v	Version
	-u	Virtual user (default is "slash")
	-t	Test run, report but don't do anything
	-T	Synonym for -t
	-U	Upgrade your symlinks to the latest for your theme and plugins

Debugging options:
	-V	Increases verbosity.

EOT
	exit 0;
}

###############################################
sub version {
	print <<EOT;

$PROGNAME $VERSION

This code is a part of Slash, and is released under the GPL.
Copyright 1997-2005 by Open Source Technology Group. See README
and COPYING for more information, or see http://slashcode.com/.

EOT
	exit 0;
}
